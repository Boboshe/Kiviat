/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kiviat.rp.tb;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Boris
 */
public class FenetreTest extends javax.swing.JFrame {

    private DefaultTableModel myTableModel;
    private Vector columnName = new Vector();
    
    //Ligne entrée en dur
    private Line l1 = new Line("axe1", 1, 0 ,10);
    private Line l2 = new Line("axe2", 1, 0 ,10);
    private Line l3 = new Line("axe3", 1, 0 ,10);
    
    ArrayList<Line> rows = new ArrayList<Line>();
    
    

    private String axeName;
    private Integer axeValue;
    private Integer axeMin;
    private Integer axeMax;

//    private int codeErrVerif = -1;
    private final int ERROR_MIN_MAX = 0;
    private final int ERROR_NAME_EXISTING = 1;
    private final int ERROR_VALUE = 2;
    private final int ERROR_NAME_NOT_EXISTING = 3;

    private final int ADD = 0;
    private final int SUPP = 1;

    private int indexSupp = -1;

    private String msgErreurToSend = "";


    /**
     * Creates new form NewJFrame
     */
    public FenetreTest() {
        initComponents();
        setTitle("Fenetre Test Kiviat");
        msgErreur.setForeground(Color.red);

        columnName.add("Name");
        columnName.add("Value");
        columnName.add("Minimum");
        columnName.add("Maximum");

        myTableModel = new DefaultTableModel(columnName, 0);
        myTableModel.addTableModelListener(kiviat1);
        
        rows.add(l1);
        rows.add(l2);
        rows.add(l3);

        
        //On ajoute les vecteurs à la table
        myTableModel.addRow(l1.getVector());
        myTableModel.addRow(l2.getVector());
        myTableModel.addRow(l3.getVector());
        

        
        jTable1.setModel(myTableModel);
        kiviat1.setModel(myTableModel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        axeNameField = new javax.swing.JTextField();
        axeValueField = new javax.swing.JTextField();
        axeMinField = new javax.swing.JTextField();
        axeMaxField = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        msgErreur = new javax.swing.JLabel();
        suppBtn = new javax.swing.JButton();
        kiviat1 = new kiviat.rp.tb.Kiviat();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        axeNameField.setText("row0");

        axeValueField.setText("0");

        axeMinField.setText("0");

        axeMaxField.setText("0");

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        suppBtn.setText("Supp");
        suppBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(msgErreur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(axeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(axeValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(axeMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(axeMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(suppBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(axeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axeValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axeMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axeMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suppBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgErreur, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout kiviat1Layout = new javax.swing.GroupLayout(kiviat1);
        kiviat1.setLayout(kiviat1Layout);
        kiviat1Layout.setHorizontalGroup(
            kiviat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        kiviat1Layout.setVerticalGroup(
            kiviat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kiviat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kiviat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* --- Boutons ---*/
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        //On récupère les informations des JTextField
        axeName = axeNameField.getText();
        axeValue = Integer.parseInt(axeValueField.getText());
        axeMin = Integer.parseInt(axeMinField.getText());
        axeMax = Integer.parseInt(axeMaxField.getText());

        //On créer une ligne
        Line lign = new Line(axeName, axeValue, axeMin, axeMax);

        //On réinitialise le JLabel chargé de l'affichage du message d'erreur
        msgErreur.setText("");

        //Si la ligne est ok => on l'ajoute
        if (verifyAxis(lign, ADD)) {
            rows.add(lign);
            myTableModel.addRow(lign.getVector());
            jTable1.setModel(myTableModel);
            //kiviat1.addLine(axeName, 55, axeValue, axeMin, axeMax, rows.size()-1);
            //msgErreur.setText(msgErreurToSend);
            System.out.println("Axe ajouté");
            this.validate();
        } else { //Sinon on send le message d'erreur correspondant
            //On reinitialise le message d'erreur a envoyer
            msgErreur.setText(msgErreurToSend);
        }

    }//GEN-LAST:event_addBtnActionPerformed

    private void suppBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppBtnActionPerformed

        //On récupère le nom de la ligne que l'on veut supprimer
        axeName = axeNameField.getText();

        //On créer une ligne
        Line lign = new Line(axeName);

        //On réinitialise le JLabel chargé de l'affichage du message d'erreur
        msgErreur.setText("");
        //On réinitialise l'index de la row à supprimer
        indexSupp = -1;

        //Si la ligne est ok => on l'ajoute
        if (verifyAxis(lign, SUPP)) {
            //Normalement pas besoin de faire cette verification
            if (indexSupp != -1) {
                //rows.remove(indexSupp);
                myTableModel.removeRow(indexSupp);
            }
            jTable1.setModel(myTableModel);
            System.out.println("Axe supprimé");
            this.validate();
        } else { //Sinon on send le message d'erreur correspondant
            //On reinitialise le message d'erreur a envoyer
            msgErreur.setText(msgErreurToSend);
        }

    }//GEN-LAST:event_suppBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenetreTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenetreTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenetreTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenetreTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenetreTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField axeMaxField;
    private javax.swing.JTextField axeMinField;
    private javax.swing.JTextField axeNameField;
    private javax.swing.JTextField axeValueField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private kiviat.rp.tb.Kiviat kiviat1;
    private javax.swing.JLabel msgErreur;
    private javax.swing.JButton suppBtn;
    // End of variables declaration//GEN-END:variables

    /**
     * Fonction permettant de vérifier si l'axe est bien constituée pour l'une des commande suivantes:
     * - cmd = ADD : pour l'ajout d'un axe.
     * - cmd = SUPP : pour la suppression d'un axe.
     * @param lign
     * @param cmd
     * @return 
     */
    private boolean verifyAxis(Line lign, int cmd) {
        initMsgErreur();
//        System.out.println("[Lign] axeName: " + lign.getName() + ", axeValue: " + lign.getValue() + ", axeMin: " + lign.getMin() + ", axeMax: " + lign.getMax());

        boolean verif = true;

        if (cmd == ADD) {
            verif = verifAddAxis(lign, true);
        } else if (cmd == SUPP) {
            verif = verifSuppAxis(lign, false);
        }

        terminateMsg();

        //Cas par défaut = true
        //Sinon une des conditions n'est pas respectées = false
        return verif;
    }

    private boolean verifAddAxis(Line lign, boolean verif) {
        //Les vérifications s'effectuent par l'inverse
        //On initialise verif à true, et si on trouve une erreur on le passe à false
//        verif = true;

        //Vérifie que min < Max.
        //Si ce n'est pas le cas, min > Max, donc on passe verif à false
        if (lign.getMin() > lign.getMax()) {
            verif = false;
//            codeErrVerif = errMinMax;
            constituerMsgErreur(ERROR_MIN_MAX);
        }

        if (lign.getValue() < lign.getMin() || lign.getValue() > lign.getMax()) //Vérifie que la valeur est comprise entre min et Max.
        //Si ce n'est pas le cas, (lign.getName() < lign.getMin()) [OU] (lign.getName() > lign.getMax()),
        //alors on passe verif à false
        {
//            System.out.println("lign value:" + lign.getValue());
//            System.out.println("lign min:" + lign.getMin());
//            System.out.println("lign max:" + lign.getMax());
            verif = false;
//            codeErrVerif = errValue;
            constituerMsgErreur(ERROR_VALUE);
        }

        //Vérifie que le nom saisie, n'existe pas déjà.
        //Si ce n'est pas le cas, lign.getName() = item.getName() = un nom existe déjà,
        //alors on passe verif à false
        for (Line item : rows) {
            if (item.getName().equals(lign.getName())) {
                verif = false;
//                codeErrVerif = errNameExisting;
                constituerMsgErreur(ERROR_NAME_EXISTING);
            }
        }

        return verif;
    }

    private boolean verifSuppAxis(Line lign, boolean verif) {
        //Verif est à false au départ.
//        verif = false;

        //Vérifie que le nom saisie, existe bien dans la liste
        int i = -1;
        for (Line item : rows) {
            i++;
//            System.out.println("i=" + i);
            if (item.getName().equals(lign.getName())) {
                verif = true;
                indexSupp = i;
//                System.out.println("indexSupp=" + indexSupp);
            }
        }

        //Si on ne trouve pas le nom, on constitue le message d'erreur correpsondant
        if (!verif) {
            constituerMsgErreur(ERROR_NAME_NOT_EXISTING);
        }

        return verif;
    }

    private void initMsgErreur() {
        //reinstancie le message d'erreur à afficher
        msgErreurToSend = "<html> *[ERREUR] ";
    }

    private void constituerMsgErreur(int codeErrVerif) {

        switch (codeErrVerif) {
            //Ajouter
            case ERROR_MIN_MAX:
                msgErreurToSend += "<br>La valeur du min doit être inférieure à celle du max.";
                break;
            case ERROR_NAME_EXISTING:
                msgErreurToSend += "<br>Le nom saisie existe déjà.";
                break;
            case ERROR_VALUE:
                msgErreurToSend += "<br>La valeur doit être comprise entre min et max.";
                break;
            //Supprimer
            case ERROR_NAME_NOT_EXISTING:
                msgErreurToSend += "<br>Le nom de l'axe à supprimer n'existe pas.";
                msgErreurToSend += "<br>Seul le nom de l'axe suffit pour le supprimer.";
                break;
        }
        System.out.println("" + msgErreurToSend);
    }

    private void terminateMsg() {
        msgErreurToSend += "</html>";
    }

}
