/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kiviat.rp.tb;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;



import kiviat.rp.tb.KiviattException;


/**
 *
 * @author pierre
 */
public class Kiviat extends javax.swing.JLayeredPane implements TableModelListener {//PropertyChangeListener

    private int size = 400;
    private DefaultTableModel model;
    private int nbAxes;

    /**
     * Creates new form Kiviat
     */
    private ArrayList<ItemKiviat> listItem = new ArrayList<ItemKiviat>();

    public Kiviat() {
        initComponents();
        this.setBorder(BorderFactory.createLineBorder(Color.black));
    }

    public void setModel(DefaultTableModel model) throws KiviattException {
        
        //On vide la liste des itemKiviat
        listItem.clear();
        
       
        
        this.model = model;
        
        nbAxes = this.model.getRowCount();
        
        verifyModel();
        
        
        double angle = 360.0 / (double) nbAxes;
        
        for (int i = 0; i < nbAxes; i++) {

            String name = getModelName(i);
            Integer value =  getModelValue(i);
            Integer min = getModelMin(i);
            Integer max = getModelMax(i);
            
            addLine(name, 0.0 + (angle * i), value, min, max, i);       

        }
        
        repaint();
        
        
        
    }

    public int getNbAxes() {
        return nbAxes;
    }

    public void setNbAxes(int nbAxes) {
        this.nbAxes = nbAxes;
    }
    
    

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(size, size);
    }

    @Override
    public void paint(Graphics _g) {
        super.paint(_g);
        Polygon poly = new Polygon();
        for (ItemKiviat item : listItem) {
            Point2D.Double point = item.getCoordCursor();
            poly.addPoint((int) point.x, (int) point.y);
        }
        _g.drawPolygon(poly);

    }

    //Crée un nouvel objet Itemkiviat et l'ajoute à la liste
    public void addLine(String name, double angle, Integer value, Integer min, Integer max, Integer id) {
        ItemKiviat item = new ItemKiviat(name, angle, value, min, max, model, id);
        listItem.add(item);
        this.add(item);
    }

    
    //Supprime un objet ItemKiviat
    public void removeLine(int index) {
        listItem.remove(index);
        this.remove(index);
    }

    @Override
    public void setBounds(int x, int y, int w, int h) {
        super.setBounds(x, y, w, h);
        for (ItemKiviat item : listItem) {
            item.setBounds(0, 0, w, h);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 772, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 484, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void tableChanged(TableModelEvent e) {

        
        
        
        
     if (e.getType() == TableModelEvent.UPDATE) {
         
         
         
         //Numéro de la ligne et de la colonne qui a été modifé
         int numRow = e.getFirstRow();
         int numCol = e.getColumn();
         
         //Si le numéro de colonne est sup à 1 c'est un champ qu'on a pas le droit de modifier
         if(numCol > 1){
             try {
                 throw new KiviattException("Vous ne pouvez pas modifiez ces champs");
             } catch (KiviattException ex) {
                 Logger.getLogger(Kiviat.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
         //Sinon c'est bon
         else{
             String name = getModelName(numRow);
             Integer value = getModelValue(numRow);
             
             listItem.get(numRow).setName(name);
             listItem.get(numRow).setValue(value);
             
             listItem.get(numRow).majCoordCursor();
             listItem.get(numRow).repaint();
         }
     }
         
         
            
     


         else if (e.getType() == TableModelEvent.INSERT) {
             
            //Numéro de la ligne qui a été modifé
            int numRow = e.getFirstRow();

            if(model != null){
                nbAxes = model.getRowCount();
                double angle = 360.0 / (double) nbAxes;
            
                String name = getModelName(numRow);
                Integer value = getModelValue(numRow);
                Integer min = getModelMin(numRow);
                Integer max = getModelMax(numRow);
       
                addLine(name, 0.0 + (angle * nbAxes), value, min, max,nbAxes-1);
                
                for(int i = 0; i< nbAxes;i++){

                    listItem.get(i).majVueAxe(0.0 + (angle * i));
                }

            }

        } else if (e.getType() == TableModelEvent.DELETE) {
            //Numéro de la ligne qui a été modifé
            int numRow = e.getFirstRow();

            if(model != null){
                nbAxes = model.getRowCount();
                removeLine(numRow);

                double angle = 360.0 / (double) nbAxes;

                for (int i = 0; i < nbAxes; i++) {
                    listItem.get(i).majVueAxe(0.0 + (angle * i));

                    //maj de l'id
                    listItem.get(i).setId(i);
                }

            }
        

        repaint();
        }
        
        
    }

    
    private String getModelName(int numRow){
        String newName;
        try{
                 newName = (String) model.getValueAt(numRow, 0);
        }
        catch(java.lang.Exception exception){
                 throw new KiviattIllegalArgumentException("Veuillez entrez un noms valide");
        }
        return newName;
    }
    private Integer getModelValue(int numRow){
        Integer newValue;
             if (model.getValueAt(numRow, 1) instanceof String) {
                 try{
                    newValue = Integer.parseInt((String) model.getValueAt(numRow, 1));
                 }
                 catch(java.lang.NumberFormatException exception){
                     throw new KiviattIllegalArgumentException("Veuillez entrez un nombre valide");
                 }
             } 
             else if (model.getValueAt(numRow, 1) instanceof Integer) {
                 newValue = (Integer) model.getValueAt(numRow, 1);
             } 
             else {
                   throw new KiviattIllegalArgumentException("Veuillez entrez un nombre valide");
             }
             return newValue;
    }
    private Integer getModelMin(int numRow){
        Integer newMin;
             if (model.getValueAt(numRow, 2) instanceof String) {
                 try{
                    newMin = Integer.parseInt((String) model.getValueAt(numRow, 2));
                 }
                 catch(java.lang.NumberFormatException exception){
                     throw new KiviattIllegalArgumentException("Veuillez entrez un nombre valide");
                 }
             } 
             else if (model.getValueAt(numRow, 2) instanceof Integer) {
                 newMin = (Integer) model.getValueAt(numRow, 2);
             } 
             else {
                   throw new KiviattIllegalArgumentException("Veuillez entrez un nombre valide");
             }
             return newMin;
    }
    private Integer getModelMax(int numRow){
        Integer newMax;
             if (model.getValueAt(numRow, 3) instanceof String) {
                 try{
                    newMax = Integer.parseInt((String) model.getValueAt(numRow, 3));
                 }
                 catch(java.lang.NumberFormatException exception){
                     throw new KiviattIllegalArgumentException("Veuillez entrez un nombre valide");
                 }
             } 
             else if (model.getValueAt(numRow, 3) instanceof Integer) {
                 newMax = (Integer) model.getValueAt(numRow, 3);
             } 
             else {
                   throw new KiviattIllegalArgumentException("Veuillez entrez un nombre valide");
             }
             return newMax;
    }
    
    private void verifyModel() throws KiviattException{
        boolean res = true;
        for(int i = 0; i< nbAxes;i++){
           verifyAxis(i);    
        }
    }
        
   
    private void verifyAxis(int numRow) throws KiviattException{
        Integer value;
        Integer min;
        Integer max;
        String name;
        
        name = getModelName(numRow);
        min = getModelMin(numRow);
        max = getModelMax(numRow);
        value = getModelValue(numRow);
        
        System.out.println("min : " + min);
        System.out.println("max : " + max);
        
        
        
        //On verifie le type des données
        
        
            //On verifie que le min et le max et la value soit dans le bon ordre
            if(min > max){
                System.out.println("SSSSSSSSSSSSSSSSs");
                throw new KiviattException("min est sup à max");
            }
            if(value < min || value > max){
                throw new KiviattException("value n'est pas entre min et max");
            }
    }
    
    

    
}
